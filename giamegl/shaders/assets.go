// Code generated by go-bindata.
// sources:
// Path0_Line.cs.glsl
// Path1_Fill.cs.glsl
// Pipe0_Downscale.cs.glsl
// Pipe1_Filter3x3.cs.glsl
// Pipe1_Filter5x5.cs.glsl
// Raster_Fixed.cs.glsl
// Raster_Kernel_Bell.cs.glsl
// Raster_Kernel_BicubicHalf.cs.glsl
// Raster_Kernel_Bilinear.cs.glsl
// Raster_Kernel_Hermite.cs.glsl
// Raster_Kernel_Lanczos2.cs.glsl
// Raster_Kernel_Lanczos3.cs.glsl
// Raster_Kernel_MitchellOneThird.cs.glsl
// Raster_Kernel_NearestNeighbor.cs.glsl
// Raster_Repeat.cs.glsl
// Raster_Uniform.cs.glsl
// util-Mixing.cs.glsl
// DO NOT EDIT!

package shaders

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _path0_lineCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x55\xd1\x4f\xfb\x36\x10\x7e\xaf\xd4\xff\xe1\xa4\xdf\x8b\xdd\xa6\x69\xd2\x02\x2f\xa1\x48\x08\xd8\x84\xb4\xc1\x34\x3a\x89\x6d\x42\x28\x34\x0e\xb2\x94\xd8\x95\xe3\x54\x0e\xa3\xff\xfb\x74\x8e\xdd\x3a\x54\xbc\xec\x71\xbc\x90\x5e\xbe\xfb\xee\xbe\xcf\x97\xf3\x8f\x1d\x53\x0d\x97\x02\xce\x96\xc9\x78\x34\x1e\xfd\x28\x58\xc9\x05\x83\x9b\x5f\x1e\x9f\xee\xd6\x8f\x7f\xdd\xfd\xfe\x08\x49\x9c\x24\x49\x92\x1e\x5f\xfe\x7a\xfd\xfc\xc7\xfd\xc3\x3a\xbd\x80\x8b\xf3\xf3\xe5\x39\xe6\x55\x79\x27\x5b\x4d\xd4\x72\xc1\x23\x78\xe3\xa2\xe0\xe2\x1d\x56\x90\x50\x68\x05\x2f\xa5\xaa\x81\xf3\x3a\x7f\x67\x8b\x5b\xe0\xb2\xd5\xdb\x56\x67\x3e\x09\x48\xa3\x8b\xb3\x65\x12\xe6\xa5\x14\xde\xda\xb2\x64\x0a\x14\xcb\x0b\x29\xaa\x0e\x7e\x93\x5c\xe8\x06\xfe\x19\x8f\x00\x00\x76\x6c\xb3\x80\xad\x0d\xfd\xfd\x92\x8d\x47\xfb\x80\xae\x92\x9b\xbc\x7a\x6d\xf8\x07\x7b\x35\xc8\x15\x41\x10\xe9\x7a\x76\x2e\x32\x6c\x9b\x0b\x0d\x7c\x53\xe5\xf5\x96\xe0\x63\x1e\x01\xfe\xab\xb9\x70\x0f\xb9\xa1\x16\xb7\x93\xbc\x80\x3a\xe7\x82\xd0\x41\x07\xa5\x92\x75\x04\x5a\x46\xa0\x59\xbd\xdd\x2d\xb2\xfe\x1d\x86\x61\xe5\xfb\x7b\xaf\x5e\x7f\xae\xe4\x5b\x5e\xdd\x8b\x9d\xdc\xe4\x9a\x4b\x71\x7f\x1b\x9b\x17\x07\xd6\x12\x56\xe0\xb1\xe4\x1b\x30\x4c\x21\xa5\x3e\x83\x97\x40\x78\x23\x72\x41\xb0\x50\x6c\x80\x7e\x7e\x42\x1f\xd0\x32\x36\x94\xba\x16\xf1\x4f\x31\xdd\x2a\xe1\x12\xf7\xae\xbd\x4a\xe6\x1a\x0a\xae\xd0\x8b\x80\xd3\xb2\x75\x70\x05\x5a\xc6\x5d\x48\xd2\x43\x67\x1e\x6b\xbb\xb6\x7a\x61\x65\xb5\x06\x71\x27\x5d\xcb\x10\x8b\x0a\x07\x06\xed\x7d\x51\x6c\xb8\x83\x19\xb8\xd2\x97\xe1\xe0\x1d\xac\xfe\x4e\xc7\xa1\x07\xa2\xa5\xe3\xa0\xd9\x40\x22\xab\x74\xfe\xfc\xe7\xa1\x7a\x6c\x60\xee\x1f\xbb\x01\xd2\xdc\xb4\x4a\x39\x35\xb1\xf1\x9e\x08\x0d\xdd\x4f\xbd\x20\x2e\x34\x29\x2b\x29\x95\x73\x89\xd2\x10\xb4\x96\x03\x88\xf5\xcf\x03\xe6\x73\x57\x48\x2a\x3b\x64\x38\x81\x96\x35\x03\x14\xdc\xad\x65\xd6\x4d\xa7\xa1\xdd\x41\xf3\xd8\x7b\xcd\x05\xb1\x21\xd2\xd9\x31\x88\xfa\xf3\x81\x19\xce\xa7\x7f\x43\x23\xe7\x21\xcd\xbe\x12\x99\x07\x66\x34\xac\x9c\xc6\xa9\x27\x9e\x78\x7b\x4e\x13\x12\x57\xd5\x66\x44\x3d\x01\x8d\xc0\xa4\x18\xcf\xcd\x30\x7e\x92\xce\x85\x60\xaa\xe8\x0a\xfb\xf1\xcd\x89\x49\x61\x06\x26\x09\x71\x68\x43\xa3\x73\xa5\x9d\x6b\x4a\xb6\xa2\x20\x26\xa1\x5f\x41\x4c\x14\x43\x48\x7a\x02\x11\xb0\xb2\xb0\x99\x63\x9c\x42\x7a\xd2\x51\xd3\xe2\x11\xf6\x4e\x09\x98\x00\x11\xd6\x48\x98\xc3\x62\x40\x57\x02\xc1\x51\xbf\xc2\xc5\x15\x9c\x47\x78\x7a\x28\xca\x16\xca\xc0\xc0\xa5\x2d\x9d\x99\xe1\xf1\x1d\xe8\xec\x8a\xc0\xad\x83\x1a\x70\xfb\x3d\xf1\x0f\x46\xdc\xfe\x0b\x0b\x1f\x32\x10\x74\xad\x65\xcd\x37\xd7\x45\xe1\x91\x51\xcf\x44\xdc\xa2\x32\x11\x24\x91\xa5\x8d\x0d\x8d\xfc\xfa\xea\x8e\xd1\x8e\x52\xbb\xbe\x88\x9b\x8d\xde\x1d\xe3\x25\x37\x6d\x4d\x27\x28\x73\x72\x5c\xe4\xf4\x6b\x37\xfb\xe3\xcf\x3d\xab\x1a\xf6\xff\x71\xc3\x84\x93\xf2\x9f\xfc\xc0\x0b\xc1\xff\xf0\x7b\xc3\x7e\x0a\xc1\x76\xda\x7f\x77\xb7\xf0\xc3\xe5\xc2\xf1\x76\x71\x46\xf5\xdb\xcd\x7e\x73\xf8\x7d\x21\xb6\xe6\x02\x1b\x77\x57\xd0\xfe\xdf\x00\x00\x00\xff\xff\xa2\x3c\x20\x6e\xa9\x07\x00\x00")

func path0_lineCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_path0_lineCsGlsl,
		"Path0_Line.cs.glsl",
	)
}

func path0_lineCsGlsl() (*asset, error) {
	bytes, err := path0_lineCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Path0_Line.cs.glsl", size: 1961, mode: os.FileMode(438), modTime: time.Unix(1525940228, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _path1_fillCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x5f\x6b\xdb\x30\x14\xc5\x9f\x67\xf0\x77\x38\xd0\x17\x89\x68\xc1\xcd\x9f\xbe\xb8\x19\x6c\x64\xac\x81\x76\x83\xb5\x83\xbd\x05\xc5\x96\xb3\x0b\x8e\x34\x1c\x39\x95\x33\xfc\xdd\x87\x14\xdb\xe9\xba\xb6\xe4\x25\xf7\xea\x77\x8e\xce\xd5\xf5\xc5\x41\x55\x7b\x32\x1a\xb3\x69\x12\x47\x71\x74\x91\xab\x82\xb4\xc2\xc3\xcd\xe7\xef\xf7\x37\xdf\x6e\x97\x98\x9c\x9b\x77\x1f\x7f\xfe\x58\x7d\x7d\xb8\xbc\xc2\xd5\x7c\x3e\x9d\x7b\xde\xff\x4a\xd9\x98\xda\xb2\x6a\x3a\x21\x81\x0d\xe9\x9c\xf4\x16\x0b\x24\x1c\xb5\xa6\xc2\x54\x3b\x10\xed\xe4\x56\x4d\x96\x20\x53\xdb\xdf\xb5\x4d\x7b\x11\xd8\xde\xe6\xb3\x69\xf2\x54\x77\xc9\xb1\xa9\x8b\x42\x55\xf8\x64\x6a\x9d\xe3\x4f\x1c\x01\x00\x1d\x54\x36\xc3\xc6\xb7\xd2\x38\x6a\xd3\xf3\xcd\x60\xa5\xc9\x64\xb9\xde\xd3\x51\xad\x9d\x77\x10\x78\xd2\x69\x4e\x9e\xa4\xd3\x38\x3a\x18\xca\xb1\x93\xa4\x19\xf7\xbe\xef\x48\x5b\x3c\x52\x6e\x7f\x61\x81\x90\xf1\x9e\x8e\x8a\x75\x29\xf9\xd8\xa5\x1d\xe3\x3d\x48\x5b\xb6\x2d\xd7\x5f\x4a\xb3\x91\xe5\x4a\x1f\x4c\x26\x2d\x19\xbd\x5a\x8e\x1d\xef\x39\x99\x65\x7e\xf2\xa1\xf4\x7f\x0a\x53\x31\x5f\xb8\x70\x02\x87\xeb\xd3\x95\xa9\xc3\x68\xc4\x7d\x0a\x3f\x9e\x57\x8e\xba\x10\xb7\x46\xe6\x7d\x08\x11\x06\x9f\x30\x27\xd0\xf0\x2e\x51\xe0\xb1\xf0\x9a\xbe\xa4\x02\x4c\xe2\x1a\xc9\x60\xd8\x43\xef\x65\xcf\xb4\xff\xb0\x1f\xce\xeb\xfc\x4f\x33\x9c\xbc\x26\x1d\x3e\x0f\xde\x6d\x67\x50\x5b\xb3\xa3\xec\x8e\x34\x0b\x9b\x1a\x3b\x81\xf0\x3a\x6f\x31\x8d\x1f\xed\x65\x46\xba\x8e\x39\xbe\xee\x33\x30\x8f\xcf\x7c\x5a\x55\xee\xd5\xf3\x7c\xdd\x7a\x06\xa6\x1f\x2c\x2c\xdf\x9a\x4a\xbd\xf8\xf0\xa7\x62\xc6\xa4\x40\x22\x12\x91\xf0\xb0\xf1\x36\x8e\xd0\xfe\x0d\x00\x00\xff\xff\x8a\xd9\x57\x50\x42\x03\x00\x00")

func path1_fillCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_path1_fillCsGlsl,
		"Path1_Fill.cs.glsl",
	)
}

func path1_fillCsGlsl() (*asset, error) {
	bytes, err := path1_fillCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Path1_Fill.cs.glsl", size: 834, mode: os.FileMode(438), modTime: time.Unix(1525940268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipe0_downscaleCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5f\x6b\xdb\x3e\x14\x7d\x6e\x20\xdf\xe1\x40\xa1\x48\x89\x93\x38\x49\xdb\x17\xc7\x3f\xf8\x41\x61\x14\xb6\x31\xe8\x06\x7b\x2b\x6e\x22\xa7\x6a\x6d\xa9\xd8\x4a\x66\x75\xed\x77\x1f\x57\xb2\x1d\x27\x69\x07\x6b\x02\xd6\x9f\x7b\xee\x39\xc7\xf7\xca\x3a\xdd\x8a\xa2\x94\x5a\xe1\x7c\x1e\xf6\x7b\xfd\xde\xe9\x4a\xa4\x52\x09\x7c\xf9\xff\xe7\x8f\xeb\xaf\xdf\xa7\x97\xb8\xbc\xb8\x98\x5f\x50\x28\x4b\xac\xde\x18\x56\xcc\x67\x32\xc0\x9d\x54\x2b\xa9\xd6\x88\x11\x72\x6c\x94\x4c\x75\x91\x63\xa9\xef\x45\x21\x94\x81\x94\x79\xb2\x16\xb3\x2b\x18\x1d\xbd\x9b\x38\xfd\x5b\x62\x5a\xe8\x3c\xda\xa9\x82\x65\x7a\x99\x64\xb7\xa5\x7c\x16\xb7\x15\x25\x07\xe8\xec\x58\x4f\x27\x95\x4b\x91\xca\xe0\x57\xb9\x66\x72\x2b\x96\x33\x18\x7d\x23\x9f\x45\x00\xbf\x22\xde\xee\xda\xe8\x6f\xba\xe4\x51\xbf\x97\x66\x3a\x31\x48\x15\xf3\x93\x8a\x3b\xaa\xad\x96\x2b\xe4\x89\x54\x8c\xe3\x77\xbf\x07\xa0\xce\x7b\xd2\x25\x62\x3f\x67\xeb\xec\xf6\x53\xa6\xef\x92\xec\x5a\x6d\xf5\x32\x31\x52\xab\xeb\xab\x71\x65\x89\xc2\x65\xd0\x3b\xdd\x18\x5d\x08\x66\x74\x40\xa9\x5e\xfd\x9c\x39\x97\x2e\x2a\x9f\x29\xc8\x03\xec\x96\x64\x95\x3b\x38\x0f\x10\x06\x61\x10\x72\x62\x7c\x25\x5f\x47\x6e\x6b\x73\x54\x9a\xe4\xae\x64\xce\xfe\x89\x4c\xc1\x2a\x2c\x62\x4c\xc7\xce\xfe\xc9\x49\x21\xcc\xa6\x50\x98\x0d\x2a\xfa\x63\x84\xb9\x1b\x87\x98\x12\xfe\xb5\xdf\x6b\x10\x61\xa3\xf4\xef\xc5\xac\xad\xb8\x9d\x95\xc8\x4c\x82\xd8\x2d\x98\xdf\xa7\x9f\x73\xcd\x9a\xf4\x71\xc5\x31\xa9\xf7\xbc\xc0\xb8\xe2\xc1\xbb\x68\x7b\x84\xb6\xdc\x83\x9b\x82\x3b\xe9\x72\x99\x64\xe2\x3d\xe9\x56\xa6\xa5\xea\x98\x39\x92\x6e\x65\x8e\xd1\x6f\x4a\xdf\x27\x59\xda\xc8\xbb\x71\x32\x8b\xba\x87\x27\x69\x8f\x8e\x54\x86\xb9\x1a\x91\x2c\x76\x2b\xcb\x1b\xc2\xc9\xc4\x8f\xbe\xd1\x46\xe4\x4f\x51\x77\xa3\xdc\xe4\x7b\x2f\x8d\x18\xcc\xb5\x01\xa3\x9d\x8d\x86\xab\x1c\xd3\xf9\xa0\xe7\x00\xb5\x6a\x1b\xb1\x2e\x62\xdb\x88\x6d\x64\x74\x01\xb2\x09\x89\x18\x23\xca\x80\xa4\x23\xe5\x67\xc3\x21\x9a\x7e\xef\x81\x1f\x3c\xd8\x46\x78\xf0\x60\x9a\x1d\x80\x5b\xd3\x86\xa4\x31\xf4\x9d\xf2\xf5\x95\x3c\xa8\x2b\xfd\xc0\x39\xa2\xfd\x24\x5f\x44\x69\xda\x2a\x1a\x7e\x88\x48\x99\x34\xe3\x0a\x8b\x10\x2f\x2f\x70\xd3\xff\x62\x74\x5a\x7c\x60\x83\x7e\x4b\xad\x8c\x54\x1b\x71\x40\xf5\xfa\x16\xb3\xdd\x31\xdb\x3d\x66\xfb\x71\x66\xdf\xcf\xc7\x02\x71\xfb\x5d\xbb\x97\xe0\x18\xb9\x96\x8d\x10\x8e\xc3\x30\x0c\xa7\x1c\x83\x3d\x84\xf5\x08\xdb\x41\xb8\xbb\xeb\xc0\xf6\xc8\x05\xa7\x58\x90\xc6\xd9\x19\x3d\x17\x3e\x61\xfa\x71\xd3\x74\x1e\x31\x8c\xeb\x5e\xb9\xbb\xeb\xb3\x4e\x56\xee\xfb\x08\x20\x0d\x27\xff\x03\x3c\x16\x07\x34\xe5\x26\xa7\xb4\xbd\xfd\x9a\xba\x1e\xea\x7b\x88\x3e\x09\x27\x32\xa1\x9c\xfa\xfe\xfb\x13\x00\x00\xff\xff\xd2\x85\x7e\xdc\xb5\x06\x00\x00")

func pipe0_downscaleCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_pipe0_downscaleCsGlsl,
		"Pipe0_Downscale.cs.glsl",
	)
}

func pipe0_downscaleCsGlsl() (*asset, error) {
	bytes, err := pipe0_downscaleCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Pipe0_Downscale.cs.glsl", size: 1717, mode: os.FileMode(438), modTime: time.Unix(1526520557, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipe1_filter3x3CsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x5f\xcb\x9b\x30\x14\x87\xef\x05\xbf\xc3\x81\xf7\x26\x99\xe9\xdb\xa8\x6d\x6f\xa4\x17\x83\xc2\x28\xac\xbb\xd9\x06\x03\x11\x49\x63\xec\x42\x63\x52\x34\x95\x76\xa3\xdf\x7d\xf8\x67\xab\x9d\xbd\xb1\x77\x1e\xf5\x3c\xbf\xf3\xe8\xc9\x5b\x2d\xca\x4a\x1a\x0d\x8b\x90\xba\x8e\xeb\xbc\x65\x22\x97\x5a\xc0\xee\xe3\x8f\xef\xdb\x2f\xdf\xfc\x15\xac\x96\xcb\x70\xd9\x3c\x52\xec\x6a\xce\x16\x95\x61\x20\x09\xec\xa5\xce\xa4\x3e\xc0\x1a\x28\x86\xb3\x96\xb9\x29\x0b\xe0\xe6\xa7\x28\x85\xb6\x20\x65\xc1\x0e\x22\xd8\x80\x35\xd1\xbf\xc6\xca\x66\x8b\x90\x0e\x5b\x7d\x0c\xfb\x73\x9e\x8b\x12\xd2\x1d\xab\x8e\xbf\x5d\x07\x00\x20\x57\x86\x59\x88\xc3\x24\x0e\x93\x82\x55\xc7\xc8\x75\x6e\xd1\x7d\x00\x40\xca\x70\xa6\xd2\x4a\xfe\x12\xe9\xa5\xa1\x10\x18\xdc\xb9\x76\x5c\xa9\xdb\x16\xd7\xa9\x8d\xcc\xa0\x60\x52\x23\x0c\x7d\x80\xac\x05\x0f\xe0\x64\x2a\x58\x77\xd7\xe8\xa0\xd2\x4f\xca\xec\x99\xda\xea\xda\x70\x66\xa5\xd1\xdb\xcd\xfb\xe5\x8a\xa3\xe1\x48\xbc\xaf\xe6\x73\x68\x52\x66\x7e\x57\x72\xf0\xd6\xdd\x1b\xa8\xd5\xfe\x6c\x58\x86\xac\x21\x6d\x82\xd7\x27\xcc\x7c\x02\x33\x1f\xe3\xf7\x0b\x86\x0f\xd0\x68\xc5\x34\x89\x69\x12\x4d\x60\x78\xf4\x19\xc3\x9f\xc6\x78\x3a\x47\x90\x3c\xaa\xd1\x89\x66\x1e\x7d\x20\xfa\xaf\x98\x8d\x19\xd3\xcd\xc6\x8c\xff\xcd\xbc\xa9\x3f\xcd\x7b\xfc\x58\xc1\x4b\x6a\x23\xc6\x0b\x6a\x23\xc6\x40\xad\xdf\xeb\x06\xf0\xd5\x9a\x52\xfc\x25\x90\x16\xb0\x40\x5c\xb1\xe2\x84\x38\x01\x4a\xee\x27\x1b\x37\x25\x25\x14\x37\x5b\x7e\x73\x9d\x3f\x01\x00\x00\xff\xff\x5a\x85\xe7\xf0\x0b\x04\x00\x00")

func pipe1_filter3x3CsGlslBytes() ([]byte, error) {
	return bindataRead(
		_pipe1_filter3x3CsGlsl,
		"Pipe1_Filter3x3.cs.glsl",
	)
}

func pipe1_filter3x3CsGlsl() (*asset, error) {
	bytes, err := pipe1_filter3x3CsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Pipe1_Filter3x3.cs.glsl", size: 1035, mode: os.FileMode(438), modTime: time.Unix(1527138646, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pipe1_filter5x5CsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x96\xcf\x6a\xdb\x40\x10\x87\xef\x02\xbd\xc3\x40\x2e\x52\xa5\x24\xfb\x4f\xb9\x08\x1f\x0a\x81\x62\x68\x7a\x69\x0b\x05\x63\xcc\x5a\x5a\xb9\x4b\xa4\xdd\x20\xc9\xc6\x6e\xc9\xbb\x17\xc9\x72\x23\x34\xa7\xb9\x79\x6d\xcf\x37\xbf\xfd\x18\x46\xba\x3b\x99\xb6\xb3\xde\x81\x92\x2c\x0c\xc2\xe0\xae\x34\x95\x75\x06\x5e\x3e\xff\xfa\xb9\xfe\xf6\x83\x3f\xc1\x53\x96\xc9\x6c\xf8\xa9\xd6\x17\x7f\xec\xa3\x56\x0a\x9b\xc2\xde\xba\xd2\xba\x03\xac\x80\xc5\x70\x74\xb6\xf2\x6d\x03\x85\xff\x6d\x5a\xe3\x7a\xb0\xb6\xd1\x07\x23\x9e\xa1\xf7\xf9\xff\xc2\xae\x2f\x95\x64\xf3\x52\x1e\xc3\xfe\x58\x55\xa6\x85\xdd\x8b\xee\x5e\xff\x86\x01\x00\x40\x55\x7b\xdd\xc3\x26\xdb\x6e\xb2\x6d\xa3\xbb\xd7\x3c\x0c\xde\xf3\x8f\x00\x10\xd5\xbe\xd0\xf5\xae\xb3\x7f\xcc\xee\x3c\x50\x52\x98\x7d\x73\xb9\x72\xad\x1b\x4b\xc2\xe0\xe4\x6d\x09\x8d\xb6\x2e\x8a\x61\x6a\x60\x4f\xa6\x10\xf0\xe6\x3b\x58\x5d\x3f\x47\x87\x7a\xf7\xa5\xf6\x7b\x5d\xaf\xdd\xc9\x17\xba\xb7\xde\xad\x9f\x1f\xce\x97\x38\x9f\x47\x2a\xa6\xd3\xe3\x23\x0c\x5d\xee\xc5\xf5\x58\x40\xb2\xba\xfe\x23\x1a\xaf\xfd\xd5\xeb\x32\xea\x7d\x3a\x76\x48\xa6\x0e\xf7\x22\x85\x7b\x11\xc7\x0f\xe7\x18\x3e\xc1\x70\xad\x0d\xdb\x6e\xd8\x36\xa7\x30\x38\x62\x70\x2a\x23\x61\x88\x21\xc8\x0c\x9c\x43\x92\x19\xd8\x87\x9a\x31\x6e\x8a\x39\x55\x31\x5f\x2a\xe6\x74\xc5\x7c\xa9\x98\xc6\x18\x15\xf3\xa5\x62\x22\x03\xe7\x90\x64\x06\xf6\xa1\x66\x8c\x49\x31\x23\x1a\x4e\xd8\xd2\xb0\x20\x1b\x5e\x30\x38\x95\x31\x18\x5e\x30\x04\x99\x81\x73\x48\x32\x03\xfb\x50\x33\xc6\x64\x38\xa1\x0e\x71\x82\x86\x58\xd2\x15\xa3\x21\xa6\x31\x46\xc5\x68\x88\x89\x0c\x9c\x43\x92\x19\xd8\x87\x9a\x31\x6e\x8a\xa9\xab\x38\x41\xab\x58\xd1\x15\xa3\x55\x4c\x63\x8c\x8a\xd1\x2a\x26\x32\x70\x0e\x49\x66\x60\x1f\x6a\xc6\x18\x0b\xbf\xf7\xbe\x35\xb7\xca\x74\x2c\x54\x51\x51\xeb\xe6\x2d\x2a\x52\x60\xe9\xc7\xfb\x42\x3c\x1c\x59\xca\xe2\xe1\xd9\xf9\x1e\x06\xff\x02\x00\x00\xff\xff\x30\x1a\x20\x3f\x61\x08\x00\x00")

func pipe1_filter5x5CsGlslBytes() ([]byte, error) {
	return bindataRead(
		_pipe1_filter5x5CsGlsl,
		"Pipe1_Filter5x5.cs.glsl",
	)
}

func pipe1_filter5x5CsGlsl() (*asset, error) {
	bytes, err := pipe1_filter5x5CsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Pipe1_Filter5x5.cs.glsl", size: 2145, mode: os.FileMode(438), modTime: time.Unix(1526888291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_fixedCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x8b\xdb\x30\x10\x85\xef\x06\xff\x87\x81\xbd\x58\xad\xe3\x26\x76\xb2\x17\x93\x43\x61\xa1\x04\xda\x5e\xda\x42\x6f\x41\x8e\xc7\xee\x50\x59\x5a\x64\xd9\xb5\xb7\xec\x7f\x2f\x92\xea\x95\xcd\xc2\x5e\x84\x32\x99\x6f\xde\x9b\x27\xdf\x8d\xa8\x7b\x52\x12\x8e\xc5\x3e\x8e\xe2\xe8\xae\xc6\x86\x24\xc2\x97\x8f\x3f\x7f\x5c\xbe\x7e\x3f\xdc\xc3\xfd\xe9\x54\x9c\xec\x5f\x82\xcf\x6a\x30\x89\x6e\x2b\x5e\xe4\x4d\x0a\x15\xc9\x9a\x64\x0b\x67\xd8\x33\x18\x24\x35\x4a\x77\x40\x1d\x6f\x31\x7f\x00\x8d\xfd\x20\x4c\x19\xa8\x22\xa7\x35\x72\x08\xc8\x4d\xfd\x42\x8d\xd2\x00\x2d\x70\xc7\xfb\xdf\xe5\x5b\x82\xf9\x6b\xc1\x86\x84\x40\x1d\xa8\xde\xd4\xc7\x62\xbf\x86\x0a\x06\xd5\xd0\x34\xa8\xe1\xda\x1b\xae\xcd\xdf\x38\x02\x00\xa0\x11\x6f\x39\xb8\x4a\x19\x47\xcf\x6f\x4d\x38\x86\x09\x56\xae\x52\x83\xac\x57\x53\x8e\xf0\x52\xdd\x4c\x82\x44\xa8\x1b\x17\xd7\x9e\x9e\xf0\x3a\xd9\xe5\x53\x58\x55\x66\x1f\x07\xc9\xd2\xa6\x3c\x2a\xaa\xa1\xe3\x24\x13\x06\x1b\x87\x8f\xaa\x87\xb3\xbf\x27\xad\xb8\x7e\x12\xaa\xe2\xe2\x22\x47\x75\xe3\x86\x94\xbc\x3c\x64\xd3\xcc\xca\x35\xe1\x23\xf1\x9c\x3d\x77\xc1\x5f\x36\xcd\xff\x5b\x1b\xa1\xb8\x01\x92\x06\x65\x8f\x70\xf6\xbf\x13\x97\xea\x67\xc5\xeb\xc4\xbe\x45\x6a\x71\x96\x4d\x0c\x3e\x84\x0f\x63\x23\xe5\x9f\x7b\x6d\xd1\xde\xdf\xfb\x58\x17\x57\x2f\x4d\x99\x5d\xd9\x49\x7c\xa3\x27\x4c\x7c\x9d\x65\x33\xec\x36\x3d\x3b\x38\xb8\x48\x2c\xeb\xe2\x7d\xd4\x38\x2e\xa4\x33\xe7\xbb\xd3\x40\x2d\x52\xae\x5d\x22\xd6\x9b\x76\x1f\x48\x1a\x82\x61\xf0\x6e\x59\x7d\x59\xc7\xb9\x32\x4a\xe3\xeb\xe1\x29\x74\x34\x25\xd6\x44\xea\x66\xfb\x33\xfb\xc3\xac\xea\x73\x1c\xfd\x0b\x00\x00\xff\xff\x07\x0c\xc0\x73\x4c\x03\x00\x00")

func raster_fixedCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_fixedCsGlsl,
		"Raster_Fixed.cs.glsl",
	)
}

func raster_fixedCsGlsl() (*asset, error) {
	bytes, err := raster_fixedCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Fixed.cs.glsl", size: 844, mode: os.FileMode(438), modTime: time.Unix(1527135266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_bellCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5b\x6b\xdb\x30\x14\x7e\x5e\x20\xff\xe1\x40\x5f\xac\xc4\x71\xae\xee\x1e\xb2\x3c\x04\xca\x46\x61\xdb\x4b\x37\x18\x94\x12\x94\x58\x4e\x45\x65\xa9\x48\x72\x66\xb5\xe4\xbf\x0f\x49\xbe\x29\x19\xcd\x43\x2c\x1d\x7d\xdf\xb9\x7c\xe7\x48\x37\x27\x22\x15\x15\x1c\x56\xcb\xd9\x70\x30\x1c\xdc\x64\x24\xa7\x9c\xc0\x8f\xed\x9f\xdf\xf7\x3f\x7f\xcd\x6f\xe1\x36\x4d\x97\x69\x77\xb0\x85\x85\xc5\x31\x6c\x44\xa9\x23\x79\xdc\xe3\xe5\x22\x8f\x61\x4f\x79\x46\xf9\x11\x36\x30\x43\x50\x72\x9a\x0b\x59\x00\x2d\xf0\x91\x2c\xee\x40\x12\x55\x32\xbd\xee\x58\xcb\x05\xed\x53\xe6\x1d\xe5\x20\x9e\x89\x24\x5c\x03\x6d\xc8\x05\x56\x2f\xeb\x8f\x02\x2e\xae\x03\xe6\x94\x31\x22\x3b\x96\xd2\xd9\x6a\x39\xeb\x93\x96\x08\xf6\x65\x9e\x13\x09\x0f\x1a\x4b\x7d\x47\x98\xc6\xef\xc3\x01\x00\x00\x3d\x91\xc3\x02\x94\x35\xaf\xbd\xc5\x19\x32\x0b\x59\x0f\x07\xe7\x8f\xdc\xae\x5a\xb7\xbb\xaf\x94\xb1\xbd\x28\x79\xd6\x73\xbb\x72\x99\x39\x6b\xed\xa9\xf1\x05\x11\x13\x07\xcc\x76\x8a\xbe\x91\x5d\x65\x35\x89\xa1\x67\x31\x5e\x25\xca\xd7\xc3\x41\xce\x04\xd6\x90\xf3\xc8\x2f\x2a\xe4\xdc\x9c\x04\xcd\xa0\xc0\x94\x47\x08\x82\x42\x5e\x85\x82\x8d\x5f\x47\x47\xb6\xfb\xc6\xc4\x1e\xb3\x7b\x7e\x12\x07\xac\xa9\xe0\xf7\x77\x49\x65\x50\x5d\xe8\x74\x1a\x48\x20\x0f\xea\xcd\x72\xad\xaa\x0f\xf4\x8d\x44\x5e\x57\xd4\x97\x45\x79\xff\xce\xbd\x37\xdb\x9f\x13\x2b\xa9\x60\x04\x2e\xc9\xe8\x55\xa8\xa4\x42\x30\x81\x24\x8d\x2f\x51\x26\x40\x19\x8f\xf2\xa0\x26\x12\xe5\xfa\x71\xf1\x04\xcf\x42\x52\xd8\xc0\x3b\xe5\x3a\x52\xce\x25\x4c\x60\x8b\x62\xe8\x19\xc6\xb0\x85\x31\x24\x29\x3a\x87\xdc\x13\x91\x3a\xe0\x9a\x4b\xae\xb9\xe6\x36\x7a\xb8\xd6\x1d\x04\x13\xb2\x3e\xf0\xd2\xab\xb2\x68\xf6\x42\x46\x94\x6b\xd0\xb6\x75\x36\xcd\xc7\xd9\xd3\xda\xee\xbe\xd4\xdb\xb9\xdb\x8e\xc7\x6d\x73\x02\x96\x71\x0a\x4a\xed\x59\xc6\xb2\xdc\xd6\xb1\xcc\x05\xab\x2e\x0a\xa4\x8d\x75\x60\xb8\x78\x8d\x74\x15\xc3\x2c\xf6\x0d\x4b\xaa\xc9\xbc\xd1\x2d\x80\x9b\x0e\x6e\x7a\x70\xe3\xe1\x21\xc1\xd7\xf7\x22\x61\xd3\x0e\x5a\xa4\x2b\x34\x51\x75\x23\x47\x3d\xb3\xa9\xcd\xe6\x32\xaa\x13\x0c\xc6\xf5\x00\x7d\x17\x38\xab\x07\x28\xae\xc7\x51\x56\x31\x48\x83\xac\xbb\x17\x79\x41\x56\x65\x61\xa9\x81\xfd\xec\x97\xf5\xc7\xbb\xdf\xd4\xdf\x69\xaf\x1b\x4d\xdb\x7c\x15\xf6\x01\x69\x4b\xf7\x39\x77\x09\xd9\xc3\xd8\xde\x11\x64\xcb\x9a\x76\xef\x9e\x53\xa8\x15\x32\x8c\x35\x6a\x1e\xa5\xeb\x3b\xe3\x9f\x3a\x7f\x27\xec\xff\x38\x78\x48\xda\xd3\xc4\x04\xf7\xca\xdb\x91\x9b\x49\x3b\x8f\x3d\x9c\xbd\x0e\xf3\x66\x94\x1d\x41\x0b\xd9\x30\xe2\xce\x63\x0c\x05\xad\x7a\x85\x35\x80\x5e\x12\x28\xf6\xf9\xd7\x9f\xe4\x2f\xb2\xe5\x9d\x6d\xef\xaf\xde\x94\xf7\xe1\xe0\x93\x9d\x2f\xbc\x57\x51\xd5\x5e\xc3\x1c\x22\x37\xd2\x49\x1a\x4c\xa4\x24\xba\x94\x1c\x66\xc9\xe7\x14\x26\x50\x8d\xaa\x75\xd0\xa8\x96\x36\xff\x3f\x2f\x49\x61\x64\x11\x13\x0f\xe8\xad\x43\x3f\x4d\x18\x9b\xf4\xbf\x00\x00\x00\xff\xff\x62\x06\x7c\x39\xb8\x06\x00\x00")

func raster_kernel_bellCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_bellCsGlsl,
		"Raster_Kernel_Bell.cs.glsl",
	)
}

func raster_kernel_bellCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_bellCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_Bell.cs.glsl", size: 1720, mode: os.FileMode(438), modTime: time.Unix(1527136798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_bicubichalfCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5d\x6f\xe2\x3a\x10\x7d\xbe\x48\xfc\x87\x91\xfa\x62\x93\x10\x20\x40\x75\x25\x2e\x0f\x54\xd5\x5d\x55\xda\xdd\x97\xee\x4a\x2b\x55\x15\x0a\x90\x50\xab\x89\x5d\xd9\x0e\x1b\xb7\xe2\xbf\xaf\xc6\xce\x97\x61\x55\x10\x24\x33\x9e\x73\x3c\x73\x66\xec\x9b\x53\x2a\x15\x13\x1c\x16\xf3\xe9\x70\x30\x1c\xdc\x1c\xd2\x8c\xf1\x14\xbe\x6d\x7e\xfd\x7c\xf8\xfe\x63\x76\x0b\xb7\xcb\xe5\x7c\xd9\x2d\x6c\x20\xee\x8c\x3b\x98\x46\x4b\x84\xe5\x89\x11\xa5\x26\xf2\xb8\x4b\xe6\x71\x16\xc2\x8e\xf1\x03\xe3\x47\x58\xc3\x94\x42\xc9\x59\x26\x64\x01\xac\x48\x8e\x69\x7c\x0f\x32\x55\x65\xae\x57\x1d\x6a\x1e\xb3\x3e\x64\xd6\x41\xf6\xe2\x25\x95\x29\xd7\xc0\x1a\x70\x91\xa8\xd7\xd5\x67\x1b\xc6\xd7\x1b\x66\x2c\xcf\x53\xd9\xa1\x94\x3e\x2c\xe6\xd3\x3e\x68\x4e\x61\x57\x66\x59\x2a\xe1\x51\x27\x52\xdf\xa7\xb9\x4e\x3e\x86\x03\x00\x00\x76\x4a\xf7\x31\x28\x74\xaf\x9c\xc7\x3a\x0e\x18\xb2\x1a\x0e\xce\x9f\xd1\x2e\x5a\xda\xed\xff\x2c\xcf\x77\xa2\xe4\x87\x1e\xed\xc2\x66\x66\xbd\x35\x53\xc3\x05\x24\x17\xfb\x24\xdf\x2a\xf6\x9e\x6e\x2b\xd4\x24\x84\x9e\xc7\x38\x95\x18\x5f\x0d\x07\x59\x2e\x12\x0d\x19\x27\xee\xa5\xa2\x96\xe6\x24\xd8\x01\x8a\x84\x71\x42\xc1\x2b\xe4\x4d\x28\x58\xbb\x77\x72\xcc\xb7\x5f\x72\xb1\x4b\xf2\x07\x7e\x12\xfb\x44\x33\xc1\x1f\xee\xa3\xca\xd0\xba\xd0\xc9\xc4\x93\x40\xee\xd5\x3b\x62\x51\xd5\x47\xf6\x9e\x12\xa7\x2b\xed\xcb\xa2\x1c\xbf\xa5\x77\x6e\xfc\x58\xb1\xa2\x0a\x46\x60\x93\x24\x6f\x42\x45\x15\x85\x31\x44\xcb\xf0\x32\xca\x78\x51\xc6\x45\xb9\xa0\x66\x27\xc6\xf5\x53\xfc\x0c\x2f\x42\x32\x58\xc3\x07\xe3\x9a\x28\x4b\x09\x63\xd8\xd0\x10\x7a\x8e\x00\x36\x10\x40\xb4\xa4\x67\x1f\x7b\x4a\xa5\xf6\xb0\xe6\x12\x6b\xae\xb1\x8d\x1e\xb6\x75\x7b\x91\x0b\x59\x2f\x38\xe9\x55\x59\x34\xb6\x90\x84\x71\x0d\x1a\x5b\x87\x69\x3e\x4d\x9f\x57\x68\xfd\x57\x9b\x33\x6b\x06\x41\xdb\x1c\x0f\x65\xac\x82\x52\x3b\x94\x41\x94\x35\x2d\xca\x5c\xa0\xea\xa2\x40\xe2\x5e\xfb\x3c\x29\xde\x88\xae\x42\x98\x86\xae\x61\x51\x35\x9e\x35\xba\x79\xe1\xa6\x0b\x37\xbd\x70\xe3\xc2\x7d\x80\xab\xef\x55\xc2\xba\x1d\x34\xa2\x2b\x3a\x56\x75\x23\x47\x3d\xb7\xa9\xdd\xe6\x72\x57\x2b\x18\x04\xf5\x00\x7d\x15\xc9\xa1\x1e\xa0\xb0\x1e\x47\x59\x85\x20\x0d\x45\xba\x57\x79\x01\x56\x65\x81\x50\xcf\x7f\x76\xaf\xf5\xc3\xd1\xaf\xeb\xe7\xa4\xd7\x8d\xa6\x6d\xae\x0a\xbc\x40\xda\xd2\x5d\xce\x5d\x42\xb8\x18\xe2\x19\xa1\x58\xd6\xa4\xbb\x06\xad\x42\xad\x90\xfe\x5e\xa3\xe6\x52\xba\x3e\x33\xee\xaa\x73\x67\x02\xff\x03\xef\x22\x69\x57\x23\xe3\x9d\x2b\xe7\xa7\x76\x26\x71\x1e\x7b\x71\x78\x1c\x66\xcd\x28\x5b\x80\x16\xb2\x41\x84\x1d\x63\x08\x05\xab\x7a\x85\x35\x01\xbd\x24\x68\xe8\xf2\xaf\x1f\xd1\x6f\x8a\xe5\x9d\xb1\xf7\x57\x77\xca\xc7\x70\xf0\x0f\xce\x57\xb2\x53\xa4\x6a\x8f\x61\x06\xc4\x8e\xf4\xcc\x1b\x48\x99\xea\x52\x72\x20\x77\x41\x4c\x47\x15\x7e\x61\x8c\xd6\xdc\x5a\x10\xb4\xf9\x9f\x3d\x1a\xbc\xb8\xff\xc6\x02\x23\xa8\x9a\x1f\x56\x4f\x96\x30\x82\xbb\xce\x13\x00\xf9\xb7\xf1\xd8\xf5\x05\x5a\xd4\xdf\xa3\x66\x9b\x62\x81\x7f\x02\x00\x00\xff\xff\x84\xeb\xc6\xab\xf3\x06\x00\x00")

func raster_kernel_bicubichalfCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_bicubichalfCsGlsl,
		"Raster_Kernel_BicubicHalf.cs.glsl",
	)
}

func raster_kernel_bicubichalfCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_bicubichalfCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_BicubicHalf.cs.glsl", size: 1779, mode: os.FileMode(438), modTime: time.Unix(1527136819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_bilinearCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcf\x6b\xe3\x3a\x10\x3e\xd7\xe0\xff\x61\xa0\x17\xab\x71\x9c\x38\x3f\x7a\x71\x73\x08\x94\xf7\x28\xbc\xb7\x97\xee\xc2\x42\x29\x41\xb1\xe5\x54\x54\x96\x8a\x24\x67\xad\x96\xfc\xef\x8b\x24\x3b\xb6\x13\x68\x0e\xb1\x34\xfa\xbe\xd1\xcc\x37\xa3\xb9\x3d\x12\xa9\xa8\xe0\xb0\x5a\xce\xc3\x20\x0c\x6e\x0b\x52\x52\x4e\xe0\xff\xed\xef\x5f\x4f\x3f\x7e\xa6\xf7\x70\xbf\x5e\x2f\xd7\xfd\xc1\x16\x52\x8b\x63\xd8\x88\x5a\x47\xf2\xb0\xc7\xcb\x45\x19\xc3\x9e\xf2\x82\xf2\x03\x6c\x60\x8e\xa0\xe6\xb4\x14\xb2\x02\x5a\xe1\x03\x59\x3c\x82\x24\xaa\x66\x3a\xeb\x59\xcb\x05\x1d\x52\xd2\x9e\x92\x8b\x37\x22\x09\xd7\x40\x3b\x72\x85\xd5\x7b\xf6\xdd\x85\x8b\xeb\x0b\x4b\xca\x18\x91\x3d\x4b\xe9\x62\xb5\x9c\x0f\x49\x4b\x04\xfb\xba\x2c\x89\x84\x67\x8d\xa5\x7e\x24\x4c\xe3\xaf\x30\x00\x00\xa0\x47\x92\x2f\x40\x59\x73\xe6\x2d\xce\x50\x58\x48\x16\x06\xa7\xef\xdc\xae\xce\x6e\x77\xff\x50\xc6\xf6\xa2\xe6\xc5\xc0\xed\xca\x45\xe6\xac\x23\x4f\x10\x31\x91\x63\xb6\x53\xf4\x93\xec\x1a\xab\x48\x0c\x03\x8b\xf1\x1a\x51\x9e\x85\x41\xc9\x04\xd6\x50\xf2\xc8\x2f\x1a\x94\xd9\x72\x1c\x05\x2d\xa0\xc2\x94\x47\x08\x46\x69\x7c\x08\x05\x1b\xbf\x8e\x0e\x6c\xf7\x2f\x13\x7b\xcc\x9e\xf8\x51\xe4\x58\x53\xc1\x9f\x1e\x93\xc6\xa0\x36\xcd\xd9\x6c\x24\x80\xcc\xd5\xa7\xe5\x5a\x4d\x9f\xe9\x27\x89\xbc\xaa\x68\x28\x8a\xf2\xfe\x9d\x7b\x6f\xb6\x3f\x27\x55\xd2\xc0\x1d\xb8\x20\xa3\x0f\xa1\x92\x06\xc1\x14\x92\x75\x7c\x89\x32\x23\x94\xf1\x28\x0f\xea\x6e\xa2\x5c\xbf\x2c\x5e\xe1\x4d\x48\x0a\x1b\xf8\xa2\x5c\x47\xca\xb9\x84\x29\x6c\x51\x0c\x03\xc3\x04\xb6\x30\x81\x64\x8d\x4e\x63\xee\x91\x48\x3d\xe2\x9a\x4b\xae\xb9\xe6\x76\x7a\xb8\xc2\xe5\x82\x09\xd9\x1e\x78\xe9\x55\x5d\x75\x7b\x21\x23\xca\x35\x68\x5b\x3a\x1b\xe6\xcb\xfc\x35\xb3\xbb\x87\x76\x9b\xba\xed\x64\x72\x2e\xce\x88\x65\x9c\x82\x52\x7b\x96\xb1\x2c\xb7\x75\x2c\x73\xc1\x6a\x93\x02\x69\xef\xca\x19\xae\x3e\x22\xdd\xc4\x30\x8f\x7d\xc1\x92\x66\x9a\x76\xba\x8d\xe0\xa6\x87\x9b\x01\xdc\x78\xf8\x98\xe0\xf3\x7b\x97\xb0\x39\x37\x5a\xa4\x1b\x34\x55\x6d\x21\xef\x06\x66\xd3\x9a\xcd\xe5\xad\x4e\x30\x98\xb4\x0d\xf4\x9f\xc0\x45\xdb\x40\x71\xdb\x8e\xb2\x89\x41\x1a\x64\xdd\xbd\xcb\x0b\xb2\xaa\x2b\x4b\x1d\xd9\x4f\x7e\xd9\x7e\xbc\xfb\x4d\xfb\x9d\x0d\xaa\xd1\x95\xcd\x67\x61\xc7\xc7\x39\x75\x1f\x73\x1f\x90\x3d\x8c\xed\x1b\x41\x36\xad\x59\x3f\xf5\x9c\x42\x67\x21\xc7\x77\xdd\x75\x23\xe9\xfa\xcd\xf8\x41\xe7\xdf\x84\xfd\x9f\x8c\xc6\xc8\xf9\x34\x31\xa3\x77\xe5\xed\xc8\xf5\xa4\xed\xc7\x01\xce\x3e\x87\xb4\x6b\x65\x47\xd0\x42\x76\x8c\xb8\xf7\x18\x43\x45\x9b\x41\x62\x1d\x60\x10\x04\x8a\x7d\xfc\xed\x27\xf9\x83\x6c\x7a\x27\x5b\xfb\xab\x99\xf2\x15\x06\x37\xb6\xbf\xf0\x5e\x45\x6e\xc2\xdc\xd0\x12\xa2\x06\x1e\x20\x75\x67\x37\x92\xe8\x5a\x72\x48\x61\x0a\x8d\x3d\x3e\x85\x41\x67\x9b\x5b\xaf\x7f\x03\x00\x00\xff\xff\x25\x26\x4d\xef\x57\x06\x00\x00")

func raster_kernel_bilinearCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_bilinearCsGlsl,
		"Raster_Kernel_Bilinear.cs.glsl",
	)
}

func raster_kernel_bilinearCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_bilinearCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_Bilinear.cs.glsl", size: 1623, mode: os.FileMode(438), modTime: time.Unix(1527136823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_hermiteCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\xeb\x38\x14\x5d\x4f\x20\xff\xe1\x42\x37\x56\xe2\x38\xb1\x9d\x74\x93\x66\x11\x28\x33\x14\x66\x66\xd3\xf7\xe0\x41\x29\x41\xb1\xe5\x54\x54\x96\x8a\x24\xe7\x59\x2d\xf9\xef\x0f\x49\xfe\x4c\xa0\x2d\x44\xd6\xd5\x39\xf7\xe3\xdc\x2b\xdd\x9d\x89\x54\x54\x70\x58\xa7\xab\xe9\x64\x3a\xb9\xcb\x49\x41\x39\x81\xff\xf6\xbf\x7e\x3e\xfd\xff\x23\xbe\x87\xfb\xcd\x26\xdd\xf4\x07\x7b\x88\x2d\x8e\x61\x23\x2a\x1d\xc8\xd3\x11\xa7\x49\x11\xc2\x91\xf2\x9c\xf2\x13\xec\x60\x85\xa0\xe2\xb4\x10\xb2\x04\x5a\xe2\x13\x49\x1e\x41\x12\x55\x31\xbd\xed\x59\x69\x42\x87\x94\xb8\xa7\x64\xe2\x8d\x48\xc2\x35\xd0\x96\x5c\x62\xf5\xbe\xfd\x2e\x60\x72\x1b\xb0\xa0\x8c\x11\xd9\xb3\x94\xce\xd7\xe9\x6a\x48\x4a\x11\x1c\xab\xa2\x20\x12\x9e\x35\x96\xfa\x91\x30\x8d\xbf\xa6\x13\x00\x00\x7a\x26\x59\x02\xca\x9a\xb7\xde\xe2\x0c\xb9\x85\x6c\xa7\x93\xcb\x77\x6e\xd7\x9d\xdb\xc3\xdf\x94\xb1\xa3\xa8\x78\x3e\x70\xbb\x76\x99\x39\x6b\xe3\xa9\xf5\x05\x01\x13\x19\x66\x07\x45\x3f\xc9\xa1\xb6\x9a\x84\x30\xb0\x18\xaf\x12\xe5\xdb\xe9\xa4\x60\x02\x6b\x28\x78\xe0\x3f\x6a\xe4\xdc\x9c\x05\xcd\xa1\xc4\x94\x07\x08\x46\x85\x7c\x08\x05\x3b\xff\x1d\x9c\xd8\xe1\x1f\x26\x8e\x98\x3d\xf1\xb3\xc8\xb0\xa6\x82\x3f\x3d\x46\xb5\x41\x4d\xa1\xcb\xe5\x48\x02\x99\xa9\x4f\xcb\xb5\xaa\x3e\xd3\x4f\x12\x78\x5d\xd1\x50\x16\xe5\xfd\x3b\xf7\xde\x6c\xff\x9c\x58\x51\x0d\x33\x70\x49\x06\x1f\x42\x45\x35\x82\x05\x44\x9b\xf0\x1a\x65\x46\x28\xe3\x51\x1e\xd4\x46\xa2\x5c\xbf\x24\xaf\xf0\x26\x24\x85\x1d\x7c\x51\xae\x03\xe5\x5c\xc2\x02\xf6\x28\x84\x81\x61\x0e\x7b\x98\x43\xb4\x41\x97\x31\xf7\x4c\xa4\x1e\x71\xcd\x35\xd7\xdc\x72\x5b\x3d\x5c\xeb\x32\xc1\x84\x6c\x0e\xbc\xf4\xaa\x2a\xdb\xbd\x90\x01\xe5\x1a\xb4\x6d\x9d\x4d\xf3\x65\xf5\xba\xb5\xbb\x87\x66\x1b\xbb\xed\x7c\xde\x35\x67\xc4\x32\x4e\x41\xa9\x3d\xcb\x58\x96\xdb\x3a\x96\xb9\x62\x35\x45\x81\xb4\xb1\x32\x86\xcb\x8f\x40\xd7\x21\xac\x42\xdf\xb0\xa8\x5e\xc4\xad\x6e\x23\xb8\xe9\xe1\x66\x00\x37\x1e\x3e\x26\xf8\xfa\xde\x25\xec\xba\x41\x0b\x74\x8d\x16\xaa\x69\xe4\x6c\x60\x36\x8d\xd9\x5c\x47\x75\x82\xc1\xbc\x19\xa0\x7f\x05\xce\x9b\x01\x0a\x9b\x71\x94\x75\x08\xd2\x20\xeb\xee\x5d\x5e\x91\x55\x55\x5a\xea\xc8\x7e\xf1\x9f\xcd\xe2\xdd\xef\x9a\x75\x39\xe8\x46\xdb\x36\x5f\x85\x7d\x40\xba\xd2\x7d\xce\x7d\x42\xf6\x30\xb4\x77\x04\xd9\xb2\x96\xfd\xbb\xe7\x14\xea\x84\x1c\xc7\x9a\xb5\x8f\xd2\xed\x9d\xf1\x4f\x9d\xbf\x13\xf6\x77\x3e\x7a\x48\xba\xd3\xc8\x8c\xee\x95\xb7\x23\x37\x93\x76\x1e\x07\x38\x7b\x1d\xe2\x76\x94\x1d\x41\x0b\xd9\x32\xc2\xde\x63\x08\x25\xad\x07\x85\xb5\x80\x41\x12\x28\xf4\xf9\x37\x4b\xf4\x1b\xd9\xf2\x2e\xb6\xf7\x37\x6f\xca\xd7\x74\xf2\x97\x9d\x2f\x7c\x54\x41\xdd\x5d\xc3\x22\xa8\xe1\x01\x62\x34\x98\x46\x49\x74\x25\x39\x24\xb3\xda\xfe\xc3\x02\x52\xb7\xce\xbb\xa4\x2f\x6d\xe9\x0e\xb7\xb2\x11\xff\x04\x00\x00\xff\xff\x40\xcf\xfc\x4a\x75\x06\x00\x00")

func raster_kernel_hermiteCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_hermiteCsGlsl,
		"Raster_Kernel_Hermite.cs.glsl",
	)
}

func raster_kernel_hermiteCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_hermiteCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_Hermite.cs.glsl", size: 1653, mode: os.FileMode(438), modTime: time.Unix(1527136829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_lanczos2CsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5b\x6b\xeb\x38\x10\x7e\xde\x40\xfe\xc3\x40\xa1\x58\x89\xe3\xf8\x9a\xc4\x64\xf3\x60\x28\xbb\x14\x76\x97\x42\xf7\xc0\x81\x52\x82\x93\xd8\xa9\xa8\x2d\x15\x59\xce\xb1\x5a\xf2\xdf\x0f\xba\x38\xb6\x13\x68\x1e\x62\xcd\x68\xbe\xb9\x7c\x33\x9a\xbb\x53\xc6\x2a\x4c\x09\x84\x81\x3b\x1e\x8d\x47\x77\x87\x2c\xc7\x24\x83\x7f\x93\x9f\x3f\x1e\xff\xfb\xdf\x5b\xc0\x22\x8a\x82\xa8\xbb\x48\xc0\xef\x84\x27\x0c\x81\xe3\x85\x5e\x14\xfb\x8b\x28\x88\x56\xf1\x32\x0e\xfc\x60\x15\x2e\xfc\x45\x18\x04\xab\xc0\x5f\xc6\x91\xeb\xaf\x56\xa1\x17\x2f\xbd\x45\x1c\xc4\x71\xb0\x8c\x3c\x37\x5a\xf9\x6e\xbc\x0c\xe3\x30\x8c\x62\x19\xb4\x48\x05\xad\xb9\xc5\x8e\xbb\x34\xf0\x73\x1b\x76\x98\x1c\x30\x39\xc2\x06\x5c\x04\x35\xc1\x39\x65\x25\xe0\x32\x3d\x66\xfe\x03\xb0\xac\xaa\x0b\xbe\xee\x50\x81\x8f\xfb\x10\xaf\x83\xec\xe9\x5b\xc6\x32\xc2\x01\xb7\xe0\x32\xad\xde\xd7\xdf\x05\xf4\x6f\x03\xe6\xb8\x28\x32\xd6\xa1\x2a\x7e\x08\x03\xb7\x0f\x0a\x10\xec\xea\x3c\xcf\x18\x3c\xf3\x94\xf1\x87\xac\xe0\xe9\xd7\x78\x04\x00\x80\x4f\xd9\xde\x87\x4a\xaa\xd7\x5a\xa3\x14\x07\x69\xb2\x1e\x8f\xce\xdf\xb9\x0d\x2f\x6e\xb7\x7f\xe1\xa2\xd8\xd1\x9a\x1c\x7a\x6e\x43\x95\x99\xd2\x1a\x4f\xad\x2f\xb0\x0a\xba\x4f\x8b\x6d\x85\x3f\xb3\x6d\x23\x39\xb1\xa1\xa7\x11\x9a\x25\x4c\xd6\xe3\x51\x5e\xd0\x94\x43\x4e\x2c\x7d\x68\x90\x72\x73\xa2\xf8\x00\x65\x8a\x89\x85\x60\x50\xc8\x07\xad\x60\xa3\xcf\xd6\xb1\xd8\xfe\x5d\xd0\x5d\x5a\x3c\x92\x13\xdd\xa7\x1c\x53\xf2\xf8\xe0\x34\x02\x99\x42\xe7\xf3\x01\x05\x6c\x5f\x7d\x4a\xac\x64\xf5\x19\x7f\x66\x96\xe6\x15\xf5\x69\xa9\xb4\x7f\xe5\x5e\xab\xe5\x4f\x91\xe5\x34\x30\x01\x95\xa4\xf5\x41\x2b\xa7\x41\x30\x03\x27\xb2\xaf\xad\xc4\xc0\x4a\x68\x2b\x6d\xd4\x46\xc2\x84\xbf\xf8\xaf\xf0\x46\x19\x86\x0d\x7c\x61\xc2\xad\x4a\xb9\x84\x19\x24\xc8\x86\x9e\x62\x0a\x09\x4c\xc1\x89\xd0\x79\x88\x3d\x65\x8c\x0f\xb0\xe2\x1a\x2b\x6e\xb1\x2d\x1f\xaa\x75\x7b\x5a\x50\x66\x2e\x34\xf5\x55\x5d\xb6\x32\x65\x16\x26\x1c\xb8\x6c\x9d\x4c\xf3\xc5\x7d\x5d\x4b\xe9\x4f\x23\x7a\x4a\x9c\x4e\x2f\xcd\x19\xa0\x84\x62\x90\x71\x8d\x12\x12\xa5\x44\x85\x12\x57\x28\x53\x14\x30\x19\x6b\x5f\xa4\xe5\x87\xc5\x1b\x1b\x5c\x5b\x37\xcc\x69\x66\x5e\xcb\xdb\xc0\x5c\x74\xe6\xa2\x67\x2e\xb4\xf9\x10\xa0\xeb\x7b\x67\xb0\xb9\x0c\x9a\xc5\x1b\x34\xab\x4c\x23\x27\x3d\xb5\x30\x6a\x71\x1d\x55\x11\x06\x53\x33\x40\xff\xd0\xf4\x60\x06\xc8\x36\xe3\xc8\x1a\x1b\x98\x40\xd2\xdd\x3b\xbb\x02\x57\x75\x29\xa1\x03\xfd\x59\x1f\xcd\x47\xbb\xdf\x98\xef\xbc\xd7\x8d\xb6\x6d\xba\x0a\xb9\x40\x2e\xa5\xeb\x9c\xbb\x84\xe4\xa5\x2d\xdf\x08\x92\x65\xcd\xbb\x25\xaa\x18\xba\x10\x39\x8c\x35\x69\x97\xd2\xed\x9b\xd1\xab\x4e\xbf\x09\xf9\x3f\x1d\x2c\x92\xcb\xad\x23\x06\xef\x4a\xeb\x91\x9a\x49\x39\x8f\x3d\x3b\xf9\x1c\xbc\x76\x94\x15\x80\x53\xd6\x22\xec\xce\xa3\x0d\x25\x6e\x7a\x85\xb5\x06\xbd\x24\x90\xad\xf3\x37\x1f\xe7\x17\x92\xe5\x9d\x65\xef\x6f\x76\xca\xd7\x78\xf4\x07\xce\xc1\x6a\x60\x23\x57\x7a\x6f\xfc\x58\xc6\x6b\x46\x2e\x39\x99\x66\x48\xdb\x59\x22\x07\xb7\x81\xfb\x7b\x50\x83\x9f\x0c\xc6\xd6\xe0\xac\x04\x26\x50\x61\x62\x3d\xe1\x89\x1a\x24\x79\xd6\xc2\x3c\x41\xb2\x05\xd6\x13\x86\x09\xa8\x3f\xb9\x40\x1a\x34\x8c\x64\xfc\xb8\x32\xf5\xdf\x01\x00\x00\xff\xff\x6c\x69\x72\x4f\x0b\x07\x00\x00")

func raster_kernel_lanczos2CsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_lanczos2CsGlsl,
		"Raster_Kernel_Lanczos2.cs.glsl",
	)
}

func raster_kernel_lanczos2CsGlsl() (*asset, error) {
	bytes, err := raster_kernel_lanczos2CsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_Lanczos2.cs.glsl", size: 1803, mode: os.FileMode(438), modTime: time.Unix(1527136835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_lanczos3CsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x6d\x8b\xe3\x36\x10\xfe\xdc\x40\xfe\xc3\xc0\xc1\x61\x25\x8e\x63\x5b\x76\x12\x93\xe6\x83\x61\x69\x59\x68\xcb\xc2\xb5\x50\x38\x8e\xe0\x24\x76\x4e\xac\x2d\x2d\xb2\x9c\x5a\xbb\xe4\xbf\x17\xbd\x38\xb6\x13\xd8\x7c\x88\x35\xa3\x79\xe6\xe5\x99\xd1\x7c\xb9\xe4\xbc\x26\x8c\x42\x84\xfd\xe9\x64\x3a\xf9\x72\xca\x0b\x42\x73\xf8\x33\xfd\xf7\x9f\xe7\xbf\xfe\x0e\x56\xb0\x8a\x63\x1c\xf7\x17\x29\xe0\x5e\x78\x21\x80\xbd\x20\x0a\xe2\x24\x5c\xc5\x38\xde\x24\xeb\x04\x87\x78\x13\xad\xc2\x55\x84\xf1\x06\x87\xeb\x24\xf6\xc3\xcd\x26\x0a\x92\x75\xb0\x4a\x70\x92\xe0\x75\x1c\xf8\xf1\x26\xf4\x93\x75\x94\x44\x51\x9c\xa8\xa0\x65\x26\x59\x23\x1c\x7e\x3e\x64\x38\x2c\x5c\x38\x10\x7a\x22\xf4\x0c\x3b\xf0\x11\x34\x94\x14\x8c\x57\x40\xaa\xec\x9c\x87\x4f\xc0\xf3\xba\x29\xc5\xb6\x47\xe1\x90\x0c\x21\x41\x0f\x39\xb2\x9f\x39\xcf\xa9\x00\xd2\x81\xab\xac\x7e\xdd\x7e\x16\x30\x7c\x0c\x58\x90\xb2\xcc\x79\x8f\xaa\xc5\x29\xc2\xfe\x10\x84\x11\x1c\x9a\xa2\xc8\x39\x7c\x13\x19\x17\x4f\x79\x29\xb2\x8f\xe9\x04\x00\x80\x5c\xf2\x63\x08\xb5\x52\x6f\x8d\x46\x2b\x4e\xca\x64\x3b\x9d\x5c\x3f\x73\x1b\xdd\xdc\xee\x7f\x23\x65\x79\x60\x0d\x3d\x0d\xdc\x46\x3a\x33\xad\xb5\x9e\x3a\x5f\xe0\x94\xec\x98\x95\xfb\x9a\xbc\xe7\xfb\x56\x71\xe2\xc2\x40\x23\x0d\x4b\x84\x6e\xa7\x93\xa2\x64\x99\x80\x82\x3a\xe6\xd0\x22\xed\xe6\xc2\xc8\x09\xaa\x8c\x50\x07\xc1\xa8\x90\x37\x56\xc3\xce\x9c\x9d\x73\xb9\xff\xbd\x64\x87\xac\x7c\xa6\x17\x76\xcc\x04\x61\xf4\xf9\xc9\x6b\x25\xb2\x85\x2e\x97\x23\x0a\xf8\xb1\x7e\x57\x58\xc5\xea\x37\xf2\x9e\x3b\x86\x57\x34\xa4\xa5\x36\xfe\xb5\x7b\xa3\x56\x3f\x4d\x96\xd7\xc2\x0c\x74\x92\xce\x1b\xab\xbd\x16\xc1\x02\xbc\xd8\xbd\xb7\x92\x23\x2b\x69\xac\x8c\x51\x17\x89\x50\xf1\x3d\xfc\x01\x3f\x19\x27\xb0\x83\x0f\x42\x85\x53\x6b\x97\xb0\x80\x14\xb9\x30\x50\xcc\x21\x85\x39\x78\x31\xba\x8e\xb1\x97\x9c\x8b\x11\x56\xde\x63\xe5\x23\xb6\xe3\x43\xb7\xee\xc8\x4a\xc6\xed\x85\xa1\xbe\x6e\xaa\x4e\x66\xdc\x21\x54\x80\x50\xad\x53\x69\x7e\xf7\x7f\x6c\x95\xf4\xab\x15\x03\x2d\xce\xe7\xb7\xe6\x8c\x50\x52\x33\xc8\x85\x41\x49\x85\xd2\xa2\x46\xc9\x3b\x94\x2d\x0a\xb8\x8a\x75\x2c\xb3\xea\xcd\x11\xad\x0b\xbe\x6b\x1a\xe6\xb5\x8b\xa0\xe3\x6d\x64\x2e\x7b\x73\x39\x30\x97\xc6\x7c\x0c\x30\xf5\xbd\x72\xd8\xdd\x06\xcd\x11\x2d\x5a\xd4\xb6\x91\xb3\x81\x5a\x5a\xb5\xbc\x8f\xaa\x09\x83\xb9\x1d\xa0\x3f\x58\x76\xb2\x03\xe4\xda\x71\xe4\xad\x0b\x5c\x22\xe5\xee\x95\xdf\x81\xeb\xa6\x52\xd0\x91\xfe\x6a\x8e\xf6\x63\xdc\xef\xec\x77\x39\xe8\x46\xd7\x36\x53\x85\x5a\x20\xb7\xd2\x4d\xce\x7d\x42\xea\xd2\x55\x6f\x04\xa9\xb2\x96\xfd\x12\xd5\x0c\xdd\x88\x1c\xc7\x9a\x75\x4b\xe9\xf1\xcd\x98\x55\x67\xde\x84\xfa\x9f\x8f\x16\xc9\xed\xd6\x93\xa3\x77\x65\xf4\x48\xcf\xa4\x9a\xc7\x81\x9d\x7a\x0e\x41\x37\xca\x1a\x20\x18\xef\x10\x6e\xef\xd1\x85\x8a\xb4\x83\xc2\x3a\x83\x41\x12\xc8\x35\xf9\xdb\x8f\xf7\x1f\x52\xe5\x5d\x55\xef\x1f\x76\xca\xc7\x74\xf2\x0b\x29\xc0\x69\x61\xa7\x56\xfa\x60\xfc\x78\x2e\x1a\x4e\x6f\x39\xd9\x66\x28\xdb\x45\xaa\x06\xb7\x85\xaf\x5f\x41\x0f\x7e\x3a\x1a\x5b\x8b\x73\x52\x98\x41\x4d\xa8\xf3\x42\x66\x7a\x90\xd4\xd9\x08\xcb\x14\xa9\x16\x38\x2f\x04\x66\xa0\xff\xd4\x02\x69\xd1\x38\x92\xf5\xe3\xab\xd4\xff\x0f\x00\x00\xff\xff\xeb\x9d\x84\x21\x0b\x07\x00\x00")

func raster_kernel_lanczos3CsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_lanczos3CsGlsl,
		"Raster_Kernel_Lanczos3.cs.glsl",
	)
}

func raster_kernel_lanczos3CsGlsl() (*asset, error) {
	bytes, err := raster_kernel_lanczos3CsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_Lanczos3.cs.glsl", size: 1803, mode: os.FileMode(438), modTime: time.Unix(1527136838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_mitchellonethirdCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x5b\x8b\xeb\x36\x10\x7e\xde\x40\xfe\xc3\xc0\x79\x91\x7c\x5b\x5f\x92\xb0\x25\x27\x0f\x9b\x5d\x5a\x16\xda\xbe\x9c\x16\x0a\x87\x43\x70\x12\x3b\x47\xac\x2d\x2d\xb2\x9c\x5a\xbb\xe4\xbf\x97\x91\xec\xf8\x92\xb2\x0e\xc4\xd6\x68\xbe\x6f\x34\xdf\x8c\xe6\xcb\x39\x93\x15\x13\x1c\x16\x49\x38\x9f\xcd\x67\x5f\x8e\x59\xce\x78\x06\x7f\x3c\xfe\xf3\xf7\xcb\x9f\x7f\x45\x2b\x58\x2d\x97\xc9\xb2\xdf\x78\x84\xb8\x5f\x6c\x21\x0c\x92\xc9\xd3\xef\x3e\xfd\xef\xee\x7c\x56\xa4\x5a\xd4\x8a\xc8\xd3\x3e\x4d\xe2\xdc\x83\x3d\xe3\x47\xc6\x4f\xb0\x81\x90\x42\xcd\x59\x2e\x64\x09\xac\x4c\x4f\x59\xfc\x0c\x32\xab\xea\x42\xad\x7b\x54\x12\xb3\x21\x24\xea\x21\x07\xf1\x33\x93\x19\x57\xc0\x3a\x70\x99\x56\xaf\xeb\xcf\x02\xc6\xb7\x01\x73\x56\x14\x99\xec\x51\x95\x3a\x2e\x92\x70\x08\x4a\x28\xec\xeb\x3c\xcf\x24\x7c\x53\xa9\x54\xcf\x59\xa1\xd2\x8f\xf9\x0c\x00\x80\x9d\xb3\x43\x0c\x15\x9a\xd7\xd6\x62\x0c\x47\x74\x59\xcf\x67\x97\xcf\x68\x17\x57\xda\xdd\xaf\xac\x28\xf6\xa2\xe6\xc7\x01\xed\xc2\x9c\xcc\x58\x47\x4c\x40\x0a\x71\x48\x8b\x5d\xc5\xde\xb3\x5d\x83\x8a\x78\x30\xb0\x68\xab\x11\xe3\xeb\xf9\x2c\x2f\x44\xaa\x20\xe7\xc4\x7e\x34\x74\x8d\xe5\x38\x0b\x76\x84\x32\x65\x9c\x50\x18\xa5\xf1\x26\x2a\xd8\xd8\x6f\x72\x2a\x76\xbf\x15\x62\x9f\x16\x2f\xfc\x2c\x0e\xa9\x62\x82\xbf\x3c\x07\x8d\xa6\x6d\x9a\xf7\xf7\x23\x01\xe4\xa1\x7a\x47\x2c\x6a\xfa\x8d\xbd\x67\xc4\xaa\x4a\x87\xa2\x54\x96\xdf\xd0\x5b\x33\x3e\x46\xaa\xa0\x01\x07\xcc\x21\xc9\x9b\xa8\x82\x86\x82\x0f\xc1\xd2\x9b\x7a\xe9\x91\x97\xb6\x5e\xd6\xa9\x8b\xc4\xb8\xfa\x1e\xff\x80\x9f\x42\x32\xd8\xc0\x07\xe3\x8a\x54\x86\x12\x7c\x78\xa4\x1e\x0c\x0c\x2e\x3c\x82\x0b\xc1\x92\x5e\xc6\xd8\x73\x26\xd5\x08\xab\xa7\x58\x7d\x8b\xed\xf4\x30\x85\x3b\x88\x42\xc8\x76\xc3\x4a\x5f\xd5\x65\xb7\x16\x92\x30\xae\x40\x61\xe9\xf0\x98\xdf\xc3\x1f\x6b\x5c\x7d\x6d\x97\x91\x59\xba\xee\xb5\x38\x23\x94\x36\x0a\x4a\x65\x51\x1a\x51\x66\x69\x50\x7a\x82\x6a\x93\x02\x89\xb1\x0e\x45\x5a\xbe\x11\xd5\x78\x10\x7a\xb6\x60\x41\xe3\x47\x9d\x6e\x23\x77\xdd\xbb\xeb\x81\xbb\xb6\xee\x63\x80\xcd\xef\x55\xc2\xe6\xda\x68\x44\x35\xd4\xaf\xda\x42\x3a\x03\xb3\x6e\xcd\x7a\x1a\xd5\x08\x06\x6e\xdb\x40\xbf\x8b\xf4\xd8\x36\x90\xd7\xb6\xa3\x6c\x3c\x90\x9a\x22\xdd\xab\x9c\x80\xab\xba\x44\xe8\xc8\x7e\xb1\x9f\xed\xcb\xd2\x6f\xda\xf7\xfd\xa0\x1a\x5d\xd9\x6c\x16\x38\x3e\xae\xa9\xdb\x33\xf7\x07\xc2\x4d\x0f\xef\x08\xc5\xb4\xee\xfb\x89\x69\x14\xba\x0a\x39\x8e\xe5\x74\x23\xe9\xf6\xce\xd8\x41\x67\xef\x04\xfe\xbb\xa3\x31\x72\xdd\x0d\xf4\xe8\x5e\x59\x3b\x35\x3d\x89\xfd\x38\xf0\xc3\xeb\x10\x75\xad\x6c\x00\x4a\xc8\x0e\xe1\xf5\x8c\x1e\x94\xac\x19\x24\xd6\x39\x0c\x0e\x41\x3d\x7b\xfe\xf6\x15\xfc\x4b\x31\xbd\x0b\xd6\xfe\x66\xa6\x7c\xcc\x67\x77\xd8\x5f\xe9\xbe\x22\x66\xc2\xdc\xb1\x9c\x34\xf0\x15\xa7\x10\xee\xdd\xc9\x4c\xd5\x92\x03\x21\x51\xec\xff\xe2\x6c\xfd\x95\xf3\x44\x9d\x06\x7f\xe0\x02\xf1\xa3\x07\x37\x8a\x9d\xad\xdb\x99\xd1\xb8\x02\x1f\x62\x67\x4b\x51\xe7\x15\x52\x5e\x7a\xda\x78\x4a\xeb\x4f\x29\x57\xce\xd6\x4d\xc2\x01\x9d\x8f\x01\xfc\xc5\x83\x31\xa1\xe1\xc1\xd9\x82\x0b\xf1\xc2\x79\x1a\x87\x68\x39\x43\x4c\xf6\xbf\x00\x00\x00\xff\xff\xbe\xb1\x2a\x04\x2a\x07\x00\x00")

func raster_kernel_mitchellonethirdCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_mitchellonethirdCsGlsl,
		"Raster_Kernel_MitchellOneThird.cs.glsl",
	)
}

func raster_kernel_mitchellonethirdCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_mitchellonethirdCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_MitchellOneThird.cs.glsl", size: 1834, mode: os.FileMode(438), modTime: time.Unix(1527136844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_kernel_nearestneighborCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x4d\x6b\xe3\x30\x10\x3d\xc7\xe0\xff\x30\x50\x28\x56\xe3\x38\x9f\xee\xc5\xcd\x21\x50\x76\x29\xec\xee\xa5\xbb\xb0\x50\x4a\x70\x6c\x39\x15\x95\xa5\x22\xc9\x59\xab\x21\xff\x7d\x91\x64\xc7\x76\x02\xcd\x21\x96\x46\xef\x8d\x66\xde\x8c\xe6\xe6\x80\x85\x24\x9c\xc1\x6a\x39\xf3\x3d\xdf\xbb\xc9\x71\x41\x18\x86\x9f\x9b\xbf\x7f\x9e\x7e\xfd\x9e\xdf\xc3\x7d\x1c\x2f\xe3\xee\x60\x03\x16\x47\x53\xcd\x2b\x15\x88\xfd\x2e\x5d\x2e\x8a\x10\x76\x84\xe5\x84\xed\x61\x0d\x33\x04\x15\x23\x05\x17\x25\x90\x32\xdd\xe3\xc5\x23\x08\x2c\x2b\xaa\x92\x8e\xb5\x5c\x90\x3e\x65\xde\x51\x32\xfe\x86\x05\x66\x0a\x48\x4b\x2e\x53\xf9\x9e\x7c\x75\xe1\xe2\xfa\xc2\x82\x50\x8a\x45\xc7\x92\x2a\x5f\x2d\x67\x7d\xd2\x12\xc1\xae\x2a\x0a\x2c\xe0\x59\xa5\x42\x3d\x62\xaa\xd2\xa3\xef\x01\x00\x90\x03\xce\x16\x20\x8d\x39\x71\x16\x6b\xc8\x0d\x24\xf1\xbd\xd3\x57\x6e\x57\x67\xb7\xdb\x6f\x84\xd2\x1d\xaf\x58\xde\x73\xbb\xb2\x91\x59\xeb\xc0\x13\x04\x94\x67\x29\xdd\x4a\xf2\x89\xb7\xb5\x51\x24\x84\x9e\x45\x3b\x8d\x08\x4b\x7c\xaf\xa0\x3c\x55\x50\xb0\xc0\x2d\x6a\x94\x98\x72\x1c\x38\xc9\xa1\x4c\x09\x0b\x10\x0c\xd2\xf8\xe0\x12\xd6\x6e\x1d\xec\xe9\xf6\x3b\xe5\xbb\x94\x3e\xb1\x03\xcf\x52\x45\x38\x7b\x7a\x8c\x6a\x8d\x9a\x34\xa7\xd3\x81\x00\x22\x93\x9f\x86\x6b\x34\x7d\x26\x9f\x38\x70\xaa\xa2\xbe\x28\xd2\xf9\xb7\xee\x9d\xd9\xfc\xac\x54\x51\x0d\x77\x60\x83\x0c\x3e\xb8\x8c\x6a\x04\x13\x88\xe2\xf0\x12\xa5\x07\x28\xed\x50\x0e\xd4\xde\x44\x98\x7a\x59\xbc\xc2\x1b\x17\x04\xd6\x70\x24\x4c\x05\xd2\xba\x84\x09\x6c\x50\x08\x3d\xc3\x18\x36\x30\x86\x28\x46\xa7\x21\xf7\x80\x85\x1a\x70\xf5\x25\x57\x5f\x73\x5b\x3d\x6c\xe1\x32\x4e\xb9\x68\x0e\x9c\xf4\xb2\x2a\xdb\x3d\x17\x01\x61\x0a\x94\x29\x9d\x09\xf3\x65\xf6\x9a\x98\xdd\x43\xb3\x9d\xdb\xed\x78\x7c\x2e\xce\x80\xa5\xad\x82\x42\x39\x96\x36\x2c\xbb\xb5\x2c\x7d\xc1\x6a\x92\x02\x61\xee\xca\x68\x5a\x7e\x04\xaa\x0e\x61\x16\xba\x82\x45\xf5\x64\xde\xea\x36\x80\xeb\x0e\xae\x7b\x70\xed\xe0\x43\x82\xcb\xef\x5d\xc0\xfa\xdc\x68\x81\xaa\xd1\x44\x36\x85\xbc\xeb\x99\x75\x63\xd6\x97\xb7\x5a\xc1\x60\xdc\x34\xd0\x0f\x9e\xe6\x4d\x03\x85\x4d\x3b\x8a\x3a\x04\xa1\x91\x71\xf7\x2e\x2e\xc8\xb2\x2a\x0d\x75\x60\x3f\xb9\x65\xf3\x71\xee\xd7\xcd\x77\xda\xab\x46\x5b\x36\x97\x85\x19\x1f\xe7\xd4\x5d\xcc\x5d\x40\xe6\x30\x34\x6f\x04\x99\xb4\xa6\xdd\xd4\xb3\x0a\x9d\x85\x1c\xde\x75\xd7\x8e\xa4\xeb\x37\xe3\x06\x9d\x7b\x13\xe6\x7f\x3c\x18\x23\xe7\xd3\x48\x0f\xde\x95\xb3\x23\xdb\x93\xa6\x1f\x7b\x38\xf3\x1c\xe6\x6d\x2b\x5b\x82\xe2\xa2\x65\x84\x9d\xc7\x10\x4a\x52\xf7\x12\x6b\x01\xbd\x20\x50\xe8\xe2\x6f\x3e\xd1\x3f\x64\xd2\x3b\x99\xda\x5f\xcd\x94\xa3\xef\x8d\x48\x01\xc1\x24\x8a\xe1\x01\x6a\xb8\xbd\x05\xdb\xcc\x51\x6c\x7b\x71\x34\x12\x58\x55\x82\xd9\xd0\x46\x27\xdf\x6b\xf7\x33\xe3\xf1\x7f\x00\x00\x00\xff\xff\xf6\x05\xa6\xcb\x53\x06\x00\x00")

func raster_kernel_nearestneighborCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_kernel_nearestneighborCsGlsl,
		"Raster_Kernel_NearestNeighbor.cs.glsl",
	)
}

func raster_kernel_nearestneighborCsGlsl() (*asset, error) {
	bytes, err := raster_kernel_nearestneighborCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Kernel_NearestNeighbor.cs.glsl", size: 1619, mode: os.FileMode(438), modTime: time.Unix(1527136850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_repeatCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5f\xab\x9b\x30\x14\x7f\x2f\xf4\x3b\x1c\xb8\x0c\x74\xb3\xae\xad\xed\x7d\x91\x3e\x0c\x2e\x8c\xc2\xb6\x87\xfd\x81\xbd\x95\x58\x8f\xdd\x61\x31\x29\x31\x3a\xbd\xe3\x7e\xf7\x71\x0c\x1a\xc5\x71\x5f\x24\x9e\xfc\xfe\xe5\x97\x3c\x34\x68\x2a\xd2\x0a\x0e\xc9\x76\xbd\x5a\xaf\x1e\x72\x2c\x48\x21\x7c\xfe\xf0\xf3\xc7\xf9\xcb\xf7\xdd\x23\x3c\x1e\x8f\xc9\x91\xb7\xa4\xe8\x74\x6d\x03\x73\xcb\x44\xb2\x2f\x22\xc8\x48\xe5\xa4\x6e\x70\x82\x6d\x08\xb5\xa2\x42\x9b\x12\xa8\x14\x37\xdc\x3f\x81\xc1\xaa\x96\x36\xf5\xac\x64\x4f\x53\xca\xce\x53\xae\xfa\x17\x1a\x54\x16\x68\x20\x97\xa2\xfa\x9d\xbe\x66\xb8\x5f\x1a\x16\x24\x25\x1a\xcf\xaa\x6c\x7e\x48\xb6\x53\x52\x12\x42\x56\x17\x05\x1a\xf8\x8a\x77\x14\xf6\xac\x0a\xfd\x77\xbd\x02\x00\xa0\x06\xaf\x7b\xa8\xac\x30\x1c\xd9\x4f\x4c\x0f\xd4\x2c\xfb\xf2\x9a\xf4\x61\x94\xbe\x70\x8e\x4c\xd7\x2a\x9f\x48\x1f\x60\x9c\xce\x94\x20\x90\xfa\x2a\xe4\xa5\xa2\x67\xbc\xb4\xdc\x4a\x04\x93\x49\xe7\x7a\x22\x95\x72\xfd\x8d\xa6\x1c\x4a\x41\x2a\x08\x61\x16\xfb\xae\x2b\x38\xb9\x75\x70\x93\x97\x8f\x52\x67\x42\x9e\x55\xa3\xaf\xc2\x92\x56\xe7\xa7\xb8\xed\xc2\xd9\xb1\x5c\x57\x8e\xc7\xdf\x8d\xcf\x17\xb7\xdd\x7f\xa0\x1c\x87\x3d\xb8\xeb\x6f\xf4\x8c\x81\x1b\x0f\xaa\xa3\x5e\xdc\xc2\x9b\xd3\xd8\x5a\xdc\x2e\xf6\xbb\xd9\xfe\x60\x55\x48\x2d\x2c\x90\xb2\xa8\x2a\xf6\xe9\xff\x83\xde\xed\x93\x16\x79\xc0\xef\x21\xe2\xa4\x61\xdc\x86\xf0\xde\x3f\xce\xbe\x98\xf9\x85\xf1\xb3\x5b\xc4\x75\xe3\x30\x5d\x42\xa7\xe5\xf1\xfa\x9d\x7b\x05\x03\x74\x04\xc5\x7c\x19\x5e\x3d\xee\x60\x33\xdb\xdc\xc0\x2e\x1d\xa2\xf4\x37\x7e\x37\xd8\x0c\x19\xfa\x43\x38\x74\xe4\x59\x83\x47\x0f\x57\x88\xf9\x0c\xee\x3a\x8b\x7c\x77\x21\xbc\x1d\x2a\x1a\xce\xd1\x9f\xcf\x6a\x83\x4b\xf1\x08\x4a\x6a\x03\x0e\x11\xf5\xda\xee\x1b\xff\x09\xd9\xf5\x65\xbd\xfa\x17\x00\x00\xff\xff\x11\x7e\x9f\xad\xf8\x03\x00\x00")

func raster_repeatCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_repeatCsGlsl,
		"Raster_Repeat.cs.glsl",
	)
}

func raster_repeatCsGlsl() (*asset, error) {
	bytes, err := raster_repeatCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Repeat.cs.glsl", size: 1016, mode: os.FileMode(438), modTime: time.Unix(1527137859, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _raster_uniformCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x8f\x9b\x30\x10\xc5\xef\x48\x7c\x87\x27\xed\x05\x5a\x16\x12\x48\xf6\x82\x72\xa8\xb4\x52\x15\xa9\xed\xa5\xad\xd4\x5b\xe4\xc0\x90\x8e\xea\xd8\x91\x71\xd8\xb0\xd5\x7e\xf7\xca\xb8\xfc\x59\xb5\xda\x8b\x85\x87\x79\xbf\x99\xf7\xe0\xae\x23\xd3\xb2\x56\xd8\x14\xab\x30\x08\x83\xbb\x9a\x1a\x56\x84\xcf\x1f\x7e\x7c\xdf\x7f\xf9\xb6\x7e\xc0\xc3\x76\x5b\x6c\xdd\xab\x30\x90\xa2\xd7\x57\x1b\x99\xd3\x51\x14\x79\x93\xe0\xc8\xaa\x66\x75\xc2\x0e\xab\x18\x57\xc5\x8d\x36\x67\xf0\x59\x9c\x28\x7f\x84\xa1\xf6\x2a\x6d\x39\xab\x8a\x9c\x97\x92\xf5\x2c\xa9\xf4\x4f\x32\xa4\x2c\x78\x14\x3f\x69\xf3\xab\xbd\x88\x8a\xca\x30\xc8\xb2\xf9\x3a\xd1\x5a\x5b\x6f\x8a\xd5\x92\x97\xc7\x38\x5e\x9b\x86\x0c\x0c\x89\x5a\x2b\xd9\xe3\xd0\x5a\x61\x2c\x7e\x87\x01\x00\x70\x47\x55\x8e\xa1\x54\x86\xc1\x4b\xf9\x06\xab\xf8\x0f\xab\xd2\x52\x9b\x91\xd5\x51\xb5\xc1\x50\x79\x85\x42\x24\x75\x25\xe4\xa1\xe5\x67\x3a\xdc\x9c\xc9\x04\x8b\x4a\xef\x6d\xb3\x2a\x5d\x9a\x9d\xe6\x1a\x67\xc1\x2a\x8a\x5f\xaf\x78\xd1\x2d\x76\xfe\x39\x3a\xc9\xc3\x47\xa9\x8f\x42\xee\x55\xa7\x2b\x61\x59\xab\xfd\x63\x7a\xeb\xe3\x72\xa9\xf0\x59\x7b\x9d\x3b\xdf\x4f\x36\x5d\x4f\x23\xb5\xb0\x60\x65\x49\xb5\x84\x9d\xbf\x47\x43\xd4\x9f\xb4\xa8\xa3\x29\xdd\xc4\x89\xe3\xf4\x16\x23\x9b\x7f\x80\xbf\x90\x2c\x43\x23\xf9\x82\x8e\x8c\xe5\x4a\x48\x5f\x9d\x06\xa7\xce\xdb\x80\xfc\xca\xcf\x14\xf9\x7a\x9c\xf6\xb8\x77\x83\xa3\x45\x5f\x8c\x7b\xac\x27\xe8\x22\xce\x8b\xa1\x6e\x84\x0c\x7b\x79\x51\x32\x0f\x19\x4d\x0f\xed\x8a\xa8\xc6\xce\x7f\x04\xbc\x1b\xed\x8d\xb1\x0c\x9b\x58\x6d\xe8\x5f\x4a\x82\x33\xdf\x22\x37\x2d\x19\x20\xfe\x4c\x9f\x62\x87\x7f\xf9\x13\x00\x00\xff\xff\xff\x1c\x60\xea\x11\x03\x00\x00")

func raster_uniformCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_raster_uniformCsGlsl,
		"Raster_Uniform.cs.glsl",
	)
}

func raster_uniformCsGlsl() (*asset, error) {
	bytes, err := raster_uniformCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Raster_Uniform.cs.glsl", size: 785, mode: os.FileMode(438), modTime: time.Unix(1527059995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _utilMixingCsGlsl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x6a\xc3\x30\x14\x45\x77\x83\xff\xe1\x42\x17\x19\x44\x48\x9d\x6c\x21\x5b\xa0\x04\xba\xf5\x03\xcc\x93\xac\x98\x07\xb2\x5e\xb1\x15\xd5\x6e\xe9\xbf\x17\xd9\x43\x5b\x02\x1e\x04\xe2\xea\x1c\xdd\xfb\x94\xdc\x30\xb2\x04\x1c\x0f\xfb\xb2\x28\x0b\x4f\xb3\xdc\xa3\x1a\x3a\x43\x87\xfa\xa6\x61\x38\xb4\x1c\x3a\x9c\xb1\xaf\x70\x0f\x7c\x93\xa1\x07\xf7\xd4\xb9\xfa\x82\x28\xa7\x2d\xe3\xf9\xd1\xa0\x4d\xa1\x7e\x14\xcc\xe9\x77\x15\x94\x17\x4b\xbe\x19\xf9\xd3\x35\x53\x2e\xd0\xf8\x93\xcc\x6b\x25\x87\x45\x49\xc2\x2d\x7a\xe2\xa0\x2a\x7c\x95\x05\x00\x70\x72\xb6\xc6\xbb\x8c\x38\xaf\x77\xd5\xf9\xe6\xc5\x8b\x21\x7f\x0d\x49\x2c\x45\x96\x70\xbd\xec\xa6\xb9\x3a\xad\x46\x72\xf6\x08\x4b\x99\xcf\x7b\x5e\x85\x5a\x45\x3a\x7f\xf1\x9f\x30\x1b\xc4\x92\xbf\x45\x19\x9c\x8a\xb2\xbc\x68\xf4\x3c\x29\x4b\x1a\xd6\xe4\xb3\xfb\xa8\x32\xfc\x5d\x16\x3f\x01\x00\x00\xff\xff\xf9\x7a\x03\x80\x8e\x01\x00\x00")

func utilMixingCsGlslBytes() ([]byte, error) {
	return bindataRead(
		_utilMixingCsGlsl,
		"util-Mixing.cs.glsl",
	)
}

func utilMixingCsGlsl() (*asset, error) {
	bytes, err := utilMixingCsGlslBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "util-Mixing.cs.glsl", size: 398, mode: os.FileMode(438), modTime: time.Unix(1525424395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Path0_Line.cs.glsl": path0_lineCsGlsl,
	"Path1_Fill.cs.glsl": path1_fillCsGlsl,
	"Pipe0_Downscale.cs.glsl": pipe0_downscaleCsGlsl,
	"Pipe1_Filter3x3.cs.glsl": pipe1_filter3x3CsGlsl,
	"Pipe1_Filter5x5.cs.glsl": pipe1_filter5x5CsGlsl,
	"Raster_Fixed.cs.glsl": raster_fixedCsGlsl,
	"Raster_Kernel_Bell.cs.glsl": raster_kernel_bellCsGlsl,
	"Raster_Kernel_BicubicHalf.cs.glsl": raster_kernel_bicubichalfCsGlsl,
	"Raster_Kernel_Bilinear.cs.glsl": raster_kernel_bilinearCsGlsl,
	"Raster_Kernel_Hermite.cs.glsl": raster_kernel_hermiteCsGlsl,
	"Raster_Kernel_Lanczos2.cs.glsl": raster_kernel_lanczos2CsGlsl,
	"Raster_Kernel_Lanczos3.cs.glsl": raster_kernel_lanczos3CsGlsl,
	"Raster_Kernel_MitchellOneThird.cs.glsl": raster_kernel_mitchellonethirdCsGlsl,
	"Raster_Kernel_NearestNeighbor.cs.glsl": raster_kernel_nearestneighborCsGlsl,
	"Raster_Repeat.cs.glsl": raster_repeatCsGlsl,
	"Raster_Uniform.cs.glsl": raster_uniformCsGlsl,
	"util-Mixing.cs.glsl": utilMixingCsGlsl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Path0_Line.cs.glsl": &bintree{path0_lineCsGlsl, map[string]*bintree{}},
	"Path1_Fill.cs.glsl": &bintree{path1_fillCsGlsl, map[string]*bintree{}},
	"Pipe0_Downscale.cs.glsl": &bintree{pipe0_downscaleCsGlsl, map[string]*bintree{}},
	"Pipe1_Filter3x3.cs.glsl": &bintree{pipe1_filter3x3CsGlsl, map[string]*bintree{}},
	"Pipe1_Filter5x5.cs.glsl": &bintree{pipe1_filter5x5CsGlsl, map[string]*bintree{}},
	"Raster_Fixed.cs.glsl": &bintree{raster_fixedCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_Bell.cs.glsl": &bintree{raster_kernel_bellCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_BicubicHalf.cs.glsl": &bintree{raster_kernel_bicubichalfCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_Bilinear.cs.glsl": &bintree{raster_kernel_bilinearCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_Hermite.cs.glsl": &bintree{raster_kernel_hermiteCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_Lanczos2.cs.glsl": &bintree{raster_kernel_lanczos2CsGlsl, map[string]*bintree{}},
	"Raster_Kernel_Lanczos3.cs.glsl": &bintree{raster_kernel_lanczos3CsGlsl, map[string]*bintree{}},
	"Raster_Kernel_MitchellOneThird.cs.glsl": &bintree{raster_kernel_mitchellonethirdCsGlsl, map[string]*bintree{}},
	"Raster_Kernel_NearestNeighbor.cs.glsl": &bintree{raster_kernel_nearestneighborCsGlsl, map[string]*bintree{}},
	"Raster_Repeat.cs.glsl": &bintree{raster_repeatCsGlsl, map[string]*bintree{}},
	"Raster_Uniform.cs.glsl": &bintree{raster_uniformCsGlsl, map[string]*bintree{}},
	"util-Mixing.cs.glsl": &bintree{utilMixingCsGlsl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

